{"version":3,"sources":["assets/images/register-bg.jpg","components/Registration/index.tsx"],"names":["module","exports","Register","observer","useState","open","setOpen","ROLE_ENUM","CLIENT","userType","setUserType","useStore","authStore","registerStore","classes","useStyles","userName","setUsername","password","setPassword","confirmPassword","setConfirmPassword","email","setEmail","firstName","setFirstName","lastName","setLastName","phone","setPhone","dateOB","setDateOB","disabled","isEmpty","loading","className","container","isAuth","to","form","title","variant","color","label","value","error","Boolean","helperText","input","fullWidth","required","onChange","e","target","type","InputLabelProps","shrink","onClose","onOpen","PRODUCER","ORGANIZER","onClick","handleRegister","dateOfBirth","role","makeStyles","theme","mixins","fullPageContainer","width","maxWidth","background","require","backgroundSize","backgroundColor","palette","common","white","marginBottom"],"mappings":"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","file":"static/js/13.b5c0e34e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/register-bg.1a46a365.jpg\";","import React, { useState, ChangeEventHandler, MouseEventHandler } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core';\nimport isEmpty from 'lodash/isEmpty';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { observer } from 'mobx-react-lite';\n\nimport { ROLE_ENUM } from 'stores/registerStore';\nimport useStore from 'hooks/useStore';\nimport Loading from 'components/@common/Loading';\n\nconst Register = observer(() => {\n  const [open, setOpen] = useState(false);\n  const [userType, setUserType] = useState(ROLE_ENUM.CLIENT);\n  const { authStore, registerStore } = useStore();\n  const classes = useStyles();\n\n  // form fields\n  const [userName, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [dateOB, setDateOB] = useState('');\n\n  // input handlers\n  const handleUsernameChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setUsername(e.target.value);\n  };\n  const handlePasswordChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setPassword(e.target.value);\n  };\n  const handleConfirmPasswordChange: ChangeEventHandler<HTMLInputElement> = (\n    e\n  ) => {\n    setConfirmPassword(e.target.value);\n  };\n  const handleEmailChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setEmail(e.target.value);\n  };\n  const handleFirstNameChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setFirstName(e.target.value);\n  };\n  const handleLastNameChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setLastName(e.target.value);\n  };\n  const handlePhoneChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setPhone(e.target.value);\n  };\n  const handleDateOBChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setDateOB(e.target.value);\n  };\n\n  const handleTypeChange: ChangeEventHandler<{\n    name?: string;\n    value: unknown;\n  }> = (e) => {\n    if (typeof e.target.value === 'string') {\n      setUserType(e.target.value);\n    }\n  };\n\n  const disabled =\n    isEmpty(userName) ||\n    isEmpty(password) ||\n    isEmpty(email) ||\n    isEmpty(firstName) ||\n    isEmpty(lastName) ||\n    isEmpty(dateOB) ||\n    registerStore.loading;\n\n  // User type handler\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  // register handler\n  const handleRegister: MouseEventHandler = () => {\n    if (password === confirmPassword) {\n      registerStore.handleRegister({\n        userName,\n        password,\n        firstName,\n        lastName,\n        phone,\n        email,\n        dateOfBirth: dateOB,\n        role: userType,\n      });\n    }\n  };\n\n  return (\n    <Container className={classes.container}>\n      {authStore.isAuth && <Redirect to=\"/\" />}\n      <form className={classes.form}>\n        {!registerStore.loading ? (\n          <Typography className={classes.title} variant=\"h4\" color=\"secondary\">\n            Create New User\n          </Typography>\n        ) : (\n          <Loading />\n        )}\n        <TextField\n          label=\"Username\"\n          value={userName}\n          error={Boolean(registerStore.error)}\n          helperText={registerStore.error && `${registerStore.error}`}\n          className={classes.input}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          required={true}\n          onChange={handleUsernameChange}\n        />\n        <TextField\n          type=\"password\"\n          label=\"Password\"\n          value={password}\n          error={Boolean(registerStore.error)}\n          className={classes.input}\n          onChange={handlePasswordChange}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          required={true}\n        />\n        <TextField\n          type=\"password\"\n          label=\"Confirm Password\"\n          value={confirmPassword}\n          className={classes.input}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          required={true}\n          error={password !== confirmPassword}\n          onChange={handleConfirmPasswordChange}\n        />\n        <TextField\n          label=\"Email\"\n          type=\"email\"\n          value={email}\n          error={Boolean(registerStore.error)}\n          className={classes.input}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          required={true}\n          onChange={handleEmailChange}\n        />\n        <TextField\n          label=\"First name\"\n          value={firstName}\n          error={Boolean(registerStore.error)}\n          className={classes.input}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          required={true}\n          onChange={handleFirstNameChange}\n        />\n        <TextField\n          label=\"Last name\"\n          value={lastName}\n          error={Boolean(registerStore.error)}\n          className={classes.input}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          required={true}\n          onChange={handleLastNameChange}\n        />\n        <TextField\n          label=\"Phone\"\n          value={phone}\n          error={Boolean(registerStore.error)}\n          className={classes.input}\n          disabled={registerStore.loading}\n          fullWidth={true}\n          onChange={handlePhoneChange}\n        />\n        <TextField\n          label=\"Date of birth\"\n          value={dateOB}\n          type=\"date\"\n          error={Boolean(registerStore.error)}\n          className={classes.input}\n          disabled={registerStore.loading}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          fullWidth={true}\n          required={true}\n          onChange={handleDateOBChange}\n        />\n        <div>\n          <Select\n            open={open}\n            value={userType}\n            fullWidth={true}\n            required={true}\n            className={classes.input}\n            onChange={handleTypeChange}\n            onClose={handleClose}\n            onOpen={handleOpen}\n          >\n            <MenuItem value={ROLE_ENUM.CLIENT}>Client</MenuItem>\n            <MenuItem value={ROLE_ENUM.PRODUCER}>Producer</MenuItem>\n            <MenuItem value={ROLE_ENUM.ORGANIZER}>Organizor</MenuItem>\n          </Select>\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={registerStore.loading || disabled}\n          onClick={handleRegister}\n        >\n          Register\n        </Button>\n      </form>\n    </Container>\n  );\n});\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    ...theme.mixins.fullPageContainer,\n    width: '100%',\n    maxWidth: '100%',\n    background: `url(${require('assets/images/register-bg.jpg')}) center no-repeat`,\n    backgroundSize: 'cover',\n  },\n  form: {\n    ...theme.mixins.form,\n    backgroundColor: theme.palette.common.white,\n  },\n  title: {\n    marginBottom: 25,\n  },\n  input: {\n    marginBottom: 25,\n  },\n}));\n\nexport default Register;\n"],"sourceRoot":""}